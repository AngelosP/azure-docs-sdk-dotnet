<Type Name="AsyncPageableCollection&lt;T&gt;" FullName="System.ClientModel.AsyncPageableCollection&lt;T&gt;">
  <TypeSignature Language="C#" Value="public abstract class AsyncPageableCollection&lt;T&gt; : System.ClientModel.AsyncResultCollection&lt;T&gt;" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit AsyncPageableCollection`1&lt;T&gt; extends System.ClientModel.AsyncResultCollection`1&lt;!T&gt;" />
  <TypeSignature Language="DocId" Value="T:System.ClientModel.AsyncPageableCollection`1" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class AsyncPageableCollection(Of T)&#xA;Inherits AsyncResultCollection(Of T)" />
  <TypeSignature Language="F#" Value="type AsyncPageableCollection&lt;'T&gt; = class&#xA;    inherit AsyncResultCollection&lt;'T&gt;" />
  <AssemblyInfo>
    <AssemblyName>System.ClientModel</AssemblyName>
    <AssemblyVersion>1.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="T" />
  </TypeParameters>
  <Base>
    <BaseTypeName>System.ClientModel.AsyncResultCollection&lt;T&gt;</BaseTypeName>
    <BaseTypeArguments>
      <BaseTypeArgument TypeParamName="T">T</BaseTypeArgument>
    </BaseTypeArguments>
  </Base>
  <Interfaces />
  <Docs>
    <typeparam name="T">To be added.</typeparam>
    <summary>
            Represents a collection of results returned from a cloud service operation
            sequentially over one or more calls to the service.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected AsyncPageableCollection ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ClientModel.AsyncPageableCollection`1.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ClientModel</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
            Create a new instance of <see cref="T:System.ClientModel.AsyncPageableCollection`1" />.
            </summary>
        <remarks>This constructor does not take a <see cref="T:System.ClientModel.Primitives.PipelineResponse" />
            because derived types are expected to defer the first service call
            until the collection is enumerated using <c>await foreach</c>.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="AsPages">
      <MemberSignature Language="C#" Value="public abstract System.Collections.Generic.IAsyncEnumerable&lt;System.ClientModel.ResultPage&lt;T&gt;&gt; AsPages (string? continuationToken = default, int? pageSizeHint = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Generic.IAsyncEnumerable`1&lt;class System.ClientModel.ResultPage`1&lt;!T&gt;&gt; AsPages(string continuationToken, valuetype System.Nullable`1&lt;int32&gt; pageSizeHint) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ClientModel.AsyncPageableCollection`1.AsPages(System.String,System.Nullable{System.Int32})" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function AsPages (Optional continuationToken As String = Nothing, Optional pageSizeHint As Nullable(Of Integer) = Nothing) As IAsyncEnumerable(Of ResultPage(Of T))" />
      <MemberSignature Language="F#" Value="abstract member AsPages : string * Nullable&lt;int&gt; -&gt; System.Collections.Generic.IAsyncEnumerable&lt;System.ClientModel.ResultPage&lt;'T&gt;&gt;" Usage="asyncPageableCollection.AsPages (continuationToken, pageSizeHint)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ClientModel</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IAsyncEnumerable&lt;System.ClientModel.ResultPage&lt;T&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="continuationToken" Type="System.String" />
        <Parameter Name="pageSizeHint" Type="System.Nullable&lt;System.Int32&gt;" />
      </Parameters>
      <Docs>
        <param name="continuationToken">A token indicating where the collection
            of results returned from the service should begin. Passing <c>null</c>
            will start the collection at the first page of values.</param>
        <param name="pageSizeHint">The number of items to request that the
            service return in a <see cref="T:System.ClientModel.ResultPage`1" />, if the service supports
            such requests.</param>
        <summary>
            Return an enumerable of <see cref="T:System.ClientModel.ResultPage`1" /> that aynchronously
            enumerates the collection's pages instead of the collection's individual
            values. This may make multiple service requests.
            </summary>
        <returns>An async sequence of <see cref="T:System.ClientModel.ResultPage`1" />, each holding
            the subset of collection values contained in a given service response.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetAsyncEnumerator">
      <MemberSignature Language="C#" Value="public override System.Collections.Generic.IAsyncEnumerator&lt;T&gt; GetAsyncEnumerator (System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Collections.Generic.IAsyncEnumerator`1&lt;!T&gt; GetAsyncEnumerator(valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ClientModel.AsyncPageableCollection`1.GetAsyncEnumerator(System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetAsyncEnumerator (Optional cancellationToken As CancellationToken = Nothing) As IAsyncEnumerator(Of T)" />
      <MemberSignature Language="F#" Value="override this.GetAsyncEnumerator : System.Threading.CancellationToken -&gt; System.Collections.Generic.IAsyncEnumerator&lt;'T&gt;" Usage="asyncPageableCollection.GetAsyncEnumerator cancellationToken" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ClientModel</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.CompilerServices.AsyncIteratorStateMachine(typeof(System.ClientModel.AsyncPageableCollection&lt;&gt;+&lt;GetAsyncEnumerator&gt;d__2))]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.AsyncIteratorStateMachine(typeof(System.ClientModel.AsyncPageableCollection&lt;&gt;+&lt;GetAsyncEnumerator&gt;d__2))&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IAsyncEnumerator&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken" /> used
            with requests made while enumerating asynchronously.</param>
        <summary>
            Return an enumerator that iterates asynchronously through the collection
            values. This may make multiple service requests.
            </summary>
        <returns>An <see cref="T:System.Collections.Generic.IAsyncEnumerator`1" /> that can iterate
            asynchronously through the collection values.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
