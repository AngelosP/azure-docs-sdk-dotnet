<Type Name="WorkflowRunsClient" FullName="Azure.Analytics.Purview.Workflows.WorkflowRunsClient">
  <TypeSignature Language="C#" Value="public class WorkflowRunsClient" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit WorkflowRunsClient extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Azure.Analytics.Purview.Workflows.WorkflowRunsClient" />
  <TypeSignature Language="VB.NET" Value="Public Class WorkflowRunsClient" />
  <TypeSignature Language="F#" Value="type WorkflowRunsClient = class" />
  <AssemblyInfo>
    <AssemblyName>Azure.Analytics.Purview.Workflows</AssemblyName>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary> The WorkflowRuns service client. </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected WorkflowRunsClient ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.Workflows.WorkflowRunsClient.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.Workflows</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary> Initializes a new instance of WorkflowRunsClient for mocking. </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public WorkflowRunsClient (Uri endpoint, Azure.Core.TokenCredential credential);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Uri endpoint, class Azure.Core.TokenCredential credential) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.Workflows.WorkflowRunsClient.#ctor(System.Uri,Azure.Core.TokenCredential)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (endpoint As Uri, credential As TokenCredential)" />
      <MemberSignature Language="F#" Value="new Azure.Analytics.Purview.Workflows.WorkflowRunsClient : Uri * Azure.Core.TokenCredential -&gt; Azure.Analytics.Purview.Workflows.WorkflowRunsClient" Usage="new Azure.Analytics.Purview.Workflows.WorkflowRunsClient (endpoint, credential)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.Workflows</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="endpoint" Type="System.Uri" />
        <Parameter Name="credential" Type="Azure.Core.TokenCredential" />
      </Parameters>
      <Docs>
        <param name="endpoint"> The account endpoint of your Purview account. Example: https://{accountName}.purview.azure.com/. </param>
        <param name="credential"> A credential used to authenticate to an Azure Service. </param>
        <summary> Initializes a new instance of WorkflowRunsClient. </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="endpoint" /> or <paramref name="credential" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public WorkflowRunsClient (Uri endpoint, Azure.Core.TokenCredential credential, Azure.Analytics.Purview.Workflows.PurviewWorkflowServiceClientOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Uri endpoint, class Azure.Core.TokenCredential credential, class Azure.Analytics.Purview.Workflows.PurviewWorkflowServiceClientOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.Workflows.WorkflowRunsClient.#ctor(System.Uri,Azure.Core.TokenCredential,Azure.Analytics.Purview.Workflows.PurviewWorkflowServiceClientOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (endpoint As Uri, credential As TokenCredential, options As PurviewWorkflowServiceClientOptions)" />
      <MemberSignature Language="F#" Value="new Azure.Analytics.Purview.Workflows.WorkflowRunsClient : Uri * Azure.Core.TokenCredential * Azure.Analytics.Purview.Workflows.PurviewWorkflowServiceClientOptions -&gt; Azure.Analytics.Purview.Workflows.WorkflowRunsClient" Usage="new Azure.Analytics.Purview.Workflows.WorkflowRunsClient (endpoint, credential, options)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.Workflows</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="endpoint" Type="System.Uri" />
        <Parameter Name="credential" Type="Azure.Core.TokenCredential" />
        <Parameter Name="options" Type="Azure.Analytics.Purview.Workflows.PurviewWorkflowServiceClientOptions" />
      </Parameters>
      <Docs>
        <param name="endpoint"> The account endpoint of your Purview account. Example: https://{accountName}.purview.azure.com/. </param>
        <param name="credential"> A credential used to authenticate to an Azure Service. </param>
        <param name="options"> The options for configuring the client. </param>
        <summary> Initializes a new instance of WorkflowRunsClient. </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="endpoint" /> or <paramref name="credential" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetWorkflowRuns">
      <MemberSignature Language="C#" Value="public virtual Azure.Pageable&lt;BinaryData&gt; GetWorkflowRuns (string viewMode, string timeWindow, string orderby, System.Collections.Generic.IEnumerable&lt;string&gt; runStatuses, System.Collections.Generic.IEnumerable&lt;string&gt; workflowIds, System.Collections.Generic.IEnumerable&lt;string&gt; requestors, int? maxpagesize, Azure.RequestContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Pageable`1&lt;class System.BinaryData&gt; GetWorkflowRuns(string viewMode, string timeWindow, string orderby, class System.Collections.Generic.IEnumerable`1&lt;string&gt; runStatuses, class System.Collections.Generic.IEnumerable`1&lt;string&gt; workflowIds, class System.Collections.Generic.IEnumerable`1&lt;string&gt; requestors, valuetype System.Nullable`1&lt;int32&gt; maxpagesize, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.Workflows.WorkflowRunsClient.GetWorkflowRuns(System.String,System.String,System.String,System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String},System.Nullable{System.Int32},Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetWorkflowRuns (viewMode As String, timeWindow As String, orderby As String, runStatuses As IEnumerable(Of String), workflowIds As IEnumerable(Of String), requestors As IEnumerable(Of String), maxpagesize As Nullable(Of Integer), context As RequestContext) As Pageable(Of BinaryData)" />
      <MemberSignature Language="F#" Value="abstract member GetWorkflowRuns : string * string * string * seq&lt;string&gt; * seq&lt;string&gt; * seq&lt;string&gt; * Nullable&lt;int&gt; * Azure.RequestContext -&gt; Azure.Pageable&lt;BinaryData&gt;&#xA;override this.GetWorkflowRuns : string * string * string * seq&lt;string&gt; * seq&lt;string&gt; * seq&lt;string&gt; * Nullable&lt;int&gt; * Azure.RequestContext -&gt; Azure.Pageable&lt;BinaryData&gt;" Usage="workflowRunsClient.GetWorkflowRuns (viewMode, timeWindow, orderby, runStatuses, workflowIds, requestors, maxpagesize, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.Workflows</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Pageable&lt;System.BinaryData&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="viewMode" Type="System.String" />
        <Parameter Name="timeWindow" Type="System.String" />
        <Parameter Name="orderby" Type="System.String" />
        <Parameter Name="runStatuses" Type="System.Collections.Generic.IEnumerable&lt;System.String&gt;" />
        <Parameter Name="workflowIds" Type="System.Collections.Generic.IEnumerable&lt;System.String&gt;" />
        <Parameter Name="requestors" Type="System.Collections.Generic.IEnumerable&lt;System.String&gt;" />
        <Parameter Name="maxpagesize" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="viewMode"> To filter user's workflow runs or view as admin. </param>
        <param name="timeWindow"> Time window of filtering items. Allowed values: "1d" | "7d" | "30d" | "90d". </param>
        <param name="orderby"> The key word which used to sort the results. Allowed values: "status desc" | "status asc" | "requestor desc" | "requestor asc" | "startTime desc" | "startTime asc" | "createdTime desc" | "createdTime asc". </param>
        <param name="runStatuses"> Filter workflow runs by workflow run status. </param>
        <param name="workflowIds"> Filter items by workflow id list. </param>
        <param name="requestors"> Requestors' ids to filter. </param>
        <param name="maxpagesize"> The maximum page size to get the items at one time. The default value is 100. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] List workflow runs.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item></list></summary>
        <returns> The <see cref="T:Azure.Pageable`1" /> from the service containing a list of <see cref="T:System.BinaryData" /> objects. Details of the body schema for each item in the collection are in the Remarks section below. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call GetWorkflowRuns and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
WorkflowRunsClient client = new WorkflowRunsClient(endpoint, credential);

foreach (BinaryData item in client.GetWorkflowRuns(null, null, null, null, null, null, null, null))
{
    JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("id").ToString());
    Console.WriteLine(result.GetProperty("workflowId").ToString());
    Console.WriteLine(result.GetProperty("startTime").ToString());
    Console.WriteLine(result.GetProperty("requestor").ToString());
    Console.WriteLine(result.GetProperty("runPayload").GetProperty("type").ToString());
    Console.WriteLine(result.GetProperty("runPayload").GetProperty("targetValue").ToString());
    Console.WriteLine(result.GetProperty("status").ToString());
}
]]></code>
This sample shows how to call GetWorkflowRuns with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
WorkflowRunsClient client = new WorkflowRunsClient(endpoint, credential);

foreach (BinaryData item in client.GetWorkflowRuns("<viewMode>", "1d", "status desc", new string[] { "InProgress" }, new string[] { "<workflowIds>" }, new string[] { "<requestors>" }, 1234, null))
{
    JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("id").ToString());
    Console.WriteLine(result.GetProperty("workflowId").ToString());
    Console.WriteLine(result.GetProperty("startTime").ToString());
    Console.WriteLine(result.GetProperty("requestor").ToString());
    Console.WriteLine(result.GetProperty("userRequestId").ToString());
    Console.WriteLine(result.GetProperty("runPayload").GetProperty("type").ToString());
    Console.WriteLine(result.GetProperty("runPayload").GetProperty("targetValue").ToString());
    Console.WriteLine(result.GetProperty("status").ToString());
    Console.WriteLine(result.GetProperty("endTime").ToString());
    Console.WriteLine(result.GetProperty("cancelTime").ToString());
    Console.WriteLine(result.GetProperty("cancelComment").ToString());
}
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetWorkflowRunsAsync">
      <MemberSignature Language="C#" Value="public virtual Azure.AsyncPageable&lt;BinaryData&gt; GetWorkflowRunsAsync (string viewMode, string timeWindow, string orderby, System.Collections.Generic.IEnumerable&lt;string&gt; runStatuses, System.Collections.Generic.IEnumerable&lt;string&gt; workflowIds, System.Collections.Generic.IEnumerable&lt;string&gt; requestors, int? maxpagesize, Azure.RequestContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.AsyncPageable`1&lt;class System.BinaryData&gt; GetWorkflowRunsAsync(string viewMode, string timeWindow, string orderby, class System.Collections.Generic.IEnumerable`1&lt;string&gt; runStatuses, class System.Collections.Generic.IEnumerable`1&lt;string&gt; workflowIds, class System.Collections.Generic.IEnumerable`1&lt;string&gt; requestors, valuetype System.Nullable`1&lt;int32&gt; maxpagesize, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.Workflows.WorkflowRunsClient.GetWorkflowRunsAsync(System.String,System.String,System.String,System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String},System.Nullable{System.Int32},Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetWorkflowRunsAsync (viewMode As String, timeWindow As String, orderby As String, runStatuses As IEnumerable(Of String), workflowIds As IEnumerable(Of String), requestors As IEnumerable(Of String), maxpagesize As Nullable(Of Integer), context As RequestContext) As AsyncPageable(Of BinaryData)" />
      <MemberSignature Language="F#" Value="abstract member GetWorkflowRunsAsync : string * string * string * seq&lt;string&gt; * seq&lt;string&gt; * seq&lt;string&gt; * Nullable&lt;int&gt; * Azure.RequestContext -&gt; Azure.AsyncPageable&lt;BinaryData&gt;&#xA;override this.GetWorkflowRunsAsync : string * string * string * seq&lt;string&gt; * seq&lt;string&gt; * seq&lt;string&gt; * Nullable&lt;int&gt; * Azure.RequestContext -&gt; Azure.AsyncPageable&lt;BinaryData&gt;" Usage="workflowRunsClient.GetWorkflowRunsAsync (viewMode, timeWindow, orderby, runStatuses, workflowIds, requestors, maxpagesize, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.Workflows</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.AsyncPageable&lt;System.BinaryData&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="viewMode" Type="System.String" />
        <Parameter Name="timeWindow" Type="System.String" />
        <Parameter Name="orderby" Type="System.String" />
        <Parameter Name="runStatuses" Type="System.Collections.Generic.IEnumerable&lt;System.String&gt;" />
        <Parameter Name="workflowIds" Type="System.Collections.Generic.IEnumerable&lt;System.String&gt;" />
        <Parameter Name="requestors" Type="System.Collections.Generic.IEnumerable&lt;System.String&gt;" />
        <Parameter Name="maxpagesize" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="viewMode"> To filter user's workflow runs or view as admin. </param>
        <param name="timeWindow"> Time window of filtering items. Allowed values: "1d" | "7d" | "30d" | "90d". </param>
        <param name="orderby"> The key word which used to sort the results. Allowed values: "status desc" | "status asc" | "requestor desc" | "requestor asc" | "startTime desc" | "startTime asc" | "createdTime desc" | "createdTime asc". </param>
        <param name="runStatuses"> Filter workflow runs by workflow run status. </param>
        <param name="workflowIds"> Filter items by workflow id list. </param>
        <param name="requestors"> Requestors' ids to filter. </param>
        <param name="maxpagesize"> The maximum page size to get the items at one time. The default value is 100. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] List workflow runs.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item></list></summary>
        <returns> The <see cref="T:Azure.AsyncPageable`1" /> from the service containing a list of <see cref="T:System.BinaryData" /> objects. Details of the body schema for each item in the collection are in the Remarks section below. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call GetWorkflowRunsAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
WorkflowRunsClient client = new WorkflowRunsClient(endpoint, credential);

await foreach (BinaryData item in client.GetWorkflowRunsAsync(null, null, null, null, null, null, null, null))
{
    JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("id").ToString());
    Console.WriteLine(result.GetProperty("workflowId").ToString());
    Console.WriteLine(result.GetProperty("startTime").ToString());
    Console.WriteLine(result.GetProperty("requestor").ToString());
    Console.WriteLine(result.GetProperty("runPayload").GetProperty("type").ToString());
    Console.WriteLine(result.GetProperty("runPayload").GetProperty("targetValue").ToString());
    Console.WriteLine(result.GetProperty("status").ToString());
}
]]></code>
This sample shows how to call GetWorkflowRunsAsync with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
WorkflowRunsClient client = new WorkflowRunsClient(endpoint, credential);

await foreach (BinaryData item in client.GetWorkflowRunsAsync("<viewMode>", "1d", "status desc", new string[] { "InProgress" }, new string[] { "<workflowIds>" }, new string[] { "<requestors>" }, 1234, null))
{
    JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("id").ToString());
    Console.WriteLine(result.GetProperty("workflowId").ToString());
    Console.WriteLine(result.GetProperty("startTime").ToString());
    Console.WriteLine(result.GetProperty("requestor").ToString());
    Console.WriteLine(result.GetProperty("userRequestId").ToString());
    Console.WriteLine(result.GetProperty("runPayload").GetProperty("type").ToString());
    Console.WriteLine(result.GetProperty("runPayload").GetProperty("targetValue").ToString());
    Console.WriteLine(result.GetProperty("status").ToString());
    Console.WriteLine(result.GetProperty("endTime").ToString());
    Console.WriteLine(result.GetProperty("cancelTime").ToString());
    Console.WriteLine(result.GetProperty("cancelComment").ToString());
}
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="Pipeline">
      <MemberSignature Language="C#" Value="public virtual Azure.Core.Pipeline.HttpPipeline Pipeline { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Azure.Core.Pipeline.HttpPipeline Pipeline" />
      <MemberSignature Language="DocId" Value="P:Azure.Analytics.Purview.Workflows.WorkflowRunsClient.Pipeline" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property Pipeline As HttpPipeline" />
      <MemberSignature Language="F#" Value="member this.Pipeline : Azure.Core.Pipeline.HttpPipeline" Usage="Azure.Analytics.Purview.Workflows.WorkflowRunsClient.Pipeline" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.Workflows</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Core.Pipeline.HttpPipeline</ReturnType>
      </ReturnValue>
      <Docs>
        <summary> The HTTP pipeline for sending and receiving REST requests and responses. </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
