<Type Name="ClientUtilities" FullName="System.ClientModel.Internal.ClientUtilities">
  <TypeSignature Language="C#" Value="public class ClientUtilities" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ClientUtilities extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.ClientModel.Internal.ClientUtilities" />
  <TypeSignature Language="VB.NET" Value="Public Class ClientUtilities" />
  <TypeSignature Language="F#" Value="type ClientUtilities = class" />
  <AssemblyInfo>
    <AssemblyName>System.ClientModel</AssemblyName>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>To be added.</summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ClientUtilities ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ClientModel.Internal.ClientUtilities.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ClientModel</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AssertInRange&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static void AssertInRange&lt;T&gt; (T value, T minimum, T maximum, string name) where T : IComparable&lt;T&gt;;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void AssertInRange&lt;(class System.IComparable`1&lt;!!T&gt;) T&gt;(!!T value, !!T minimum, !!T maximum, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ClientModel.Internal.ClientUtilities.AssertInRange``1(``0,``0,``0,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub AssertInRange(Of T As IComparable(Of T)) (value As T, minimum As T, maximum As T, name As String)" />
      <MemberSignature Language="F#" Value="static member AssertInRange : 'T * 'T * 'T * string -&gt; unit (requires 'T :&gt; IComparable&lt;'T&gt;)" Usage="System.ClientModel.Internal.ClientUtilities.AssertInRange (value, minimum, maximum, name)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ClientModel</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <InterfaceName>System.IComparable&lt;T&gt;</InterfaceName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="value" Type="T" />
        <Parameter Name="minimum" Type="T" />
        <Parameter Name="maximum" Type="T" />
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <typeparam name="T">The type of to validate which implements <see cref="T:System.IComparable`1" />.</typeparam>
        <param name="value">The value to validate.</param>
        <param name="minimum">The minimum value to compare.</param>
        <param name="maximum">The maximum value to compare.</param>
        <param name="name">The name of the parameter.</param>
        <summary>
            Throws if <paramref name="value" /> is less than the <paramref name="minimum" /> or greater than the <paramref name="maximum" />.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AssertNotNull&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static void AssertNotNull&lt;T&gt; (T value, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void AssertNotNull&lt;T&gt;(!!T value, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ClientModel.Internal.ClientUtilities.AssertNotNull``1(``0,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub AssertNotNull(Of T) (value As T, name As String)" />
      <MemberSignature Language="F#" Value="static member AssertNotNull : 'T * string -&gt; unit" Usage="System.ClientModel.Internal.ClientUtilities.AssertNotNull (value, name)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ClientModel</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="value" Type="T" />
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <typeparam name="T">To be added.</typeparam>
        <param name="value">To be added.</param>
        <param name="name">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AssertNotNullOrEmpty">
      <MemberSignature Language="C#" Value="public static void AssertNotNullOrEmpty (string value, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void AssertNotNullOrEmpty(string value, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ClientModel.Internal.ClientUtilities.AssertNotNullOrEmpty(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub AssertNotNullOrEmpty (value As String, name As String)" />
      <MemberSignature Language="F#" Value="static member AssertNotNullOrEmpty : string * string -&gt; unit" Usage="System.ClientModel.Internal.ClientUtilities.AssertNotNullOrEmpty (value, name)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ClientModel</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value">To be added.</param>
        <param name="name">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateOperationCanceledException">
      <MemberSignature Language="C#" Value="public static Exception CreateOperationCanceledException (Exception? innerException, System.Threading.CancellationToken cancellationToken, string? message = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Exception CreateOperationCanceledException(class System.Exception innerException, valuetype System.Threading.CancellationToken cancellationToken, string message) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ClientModel.Internal.ClientUtilities.CreateOperationCanceledException(System.Exception,System.Threading.CancellationToken,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CreateOperationCanceledException (innerException As Exception, cancellationToken As CancellationToken, Optional message As String = Nothing) As Exception" />
      <MemberSignature Language="F#" Value="static member CreateOperationCanceledException : Exception * System.Threading.CancellationToken * string -&gt; Exception" Usage="System.ClientModel.Internal.ClientUtilities.CreateOperationCanceledException (innerException, cancellationToken, message)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ClientModel</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Exception</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="innerException" Type="System.Exception" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
        <Parameter Name="message" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="innerException">To be added.</param>
        <param name="cancellationToken">To be added.</param>
        <param name="message">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ShouldWrapInOperationCanceledException">
      <MemberSignature Language="C#" Value="public static bool ShouldWrapInOperationCanceledException (Exception exception, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool ShouldWrapInOperationCanceledException(class System.Exception exception, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ClientModel.Internal.ClientUtilities.ShouldWrapInOperationCanceledException(System.Exception,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ShouldWrapInOperationCanceledException (exception As Exception, cancellationToken As CancellationToken) As Boolean" />
      <MemberSignature Language="F#" Value="static member ShouldWrapInOperationCanceledException : Exception * System.Threading.CancellationToken -&gt; bool" Usage="System.ClientModel.Internal.ClientUtilities.ShouldWrapInOperationCanceledException (exception, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ClientModel</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="exception" Type="System.Exception" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="exception">The exception.</param>
        <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken" /> that may have triggered the exception.</param>
        <summary>Determines whether to wrap an <see cref="T:System.Exception" /> in a cancellation exception.</summary>
        <returns>true if the exception should be wrapped; otherwise, false.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ThrowIfCancellationRequested">
      <MemberSignature Language="C#" Value="public static void ThrowIfCancellationRequested (System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void ThrowIfCancellationRequested(valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ClientModel.Internal.ClientUtilities.ThrowIfCancellationRequested(System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub ThrowIfCancellationRequested (cancellationToken As CancellationToken)" />
      <MemberSignature Language="F#" Value="static member ThrowIfCancellationRequested : System.Threading.CancellationToken -&gt; unit" Usage="System.ClientModel.Internal.ClientUtilities.ThrowIfCancellationRequested cancellationToken" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ClientModel</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="cancellationToken">The token to check for a cancellation request.</param>
        <summary>Throws a cancellation exception if cancellation has been requested via <paramref name="cancellationToken" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
