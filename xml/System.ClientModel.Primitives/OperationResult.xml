<Type Name="OperationResult" FullName="System.ClientModel.Primitives.OperationResult">
  <TypeSignature Language="C#" Value="public abstract class OperationResult : System.ClientModel.ClientResult" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit OperationResult extends System.ClientModel.ClientResult" />
  <TypeSignature Language="DocId" Value="T:System.ClientModel.Primitives.OperationResult" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class OperationResult&#xA;Inherits ClientResult" />
  <TypeSignature Language="F#" Value="type OperationResult = class&#xA;    inherit ClientResult" />
  <AssemblyInfo>
    <AssemblyName>System.ClientModel</AssemblyName>
    <AssemblyVersion>1.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.ClientModel.ClientResult</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
            Represents an operation that runs asynchronously on a cloud service.  Cloud
            services use long-running operations to allow users to start an operation
            with one request and then monitor progress of the operation until it has
            completed.  <see cref="T:System.ClientModel.Primitives.OperationResult" /> enables waiting for completion of
            long-running operations.  Client libraries provide derived types that add
            properties such as <code>Value</code> or <code>Status</code> as applicable
            for a given service operation.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected OperationResult (System.ClientModel.Primitives.PipelineResponse response);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class System.ClientModel.Primitives.PipelineResponse response) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ClientModel.Primitives.OperationResult.#ctor(System.ClientModel.Primitives.PipelineResponse)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New (response As PipelineResponse)" />
      <MemberSignature Language="F#" Value="new System.ClientModel.Primitives.OperationResult : System.ClientModel.Primitives.PipelineResponse -&gt; System.ClientModel.Primitives.OperationResult" Usage="new System.ClientModel.Primitives.OperationResult response" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ClientModel</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="response" Type="System.ClientModel.Primitives.PipelineResponse" />
      </Parameters>
      <Docs>
        <param name="response">The <see cref="T:System.ClientModel.Primitives.PipelineResponse" /> received from
            the service in response to the request that started the operation.</param>
        <summary>
            Create a new instance of <see cref="T:System.ClientModel.Primitives.OperationResult" />.
            </summary>
        <remarks>Derived types will call
            <see cref="M:System.ClientModel.ClientResult.SetRawResponse(System.ClientModel.Primitives.PipelineResponse)" /> when a new
            response is received that updates the status of the operation.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsCompleted">
      <MemberSignature Language="C#" Value="public abstract bool IsCompleted { get; protected set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsCompleted" />
      <MemberSignature Language="DocId" Value="P:System.ClientModel.Primitives.OperationResult.IsCompleted" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Property IsCompleted As Boolean" />
      <MemberSignature Language="F#" Value="member this.IsCompleted : bool with get, set" Usage="System.ClientModel.Primitives.OperationResult.IsCompleted" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ClientModel</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets a value that indicates whether the operation has completed.
            </summary>
        <value>
          <c>true</c> if the operation has reached a terminal state
            (that is, is has finished successfully, ended due to an error condition,
            or has been cancelled by a user); otherwise, <c>false</c>.
            </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RehydrationToken">
      <MemberSignature Language="C#" Value="public abstract System.ClientModel.ContinuationToken? RehydrationToken { get; protected set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.ClientModel.ContinuationToken RehydrationToken" />
      <MemberSignature Language="DocId" Value="P:System.ClientModel.Primitives.OperationResult.RehydrationToken" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Property RehydrationToken As ContinuationToken" />
      <MemberSignature Language="F#" Value="member this.RehydrationToken : System.ClientModel.ContinuationToken with get, set" Usage="System.ClientModel.Primitives.OperationResult.RehydrationToken" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ClientModel</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ClientModel.ContinuationToken</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets a token that can be used to rehydrate the operation.
            </summary>
        <value>A token that can be used to rehydrate the operation, for example
            to monitor its progress or to obtain its final result, from a process
            different thatn the one that started the operation.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WaitForCompletion">
      <MemberSignature Language="C#" Value="public abstract void WaitForCompletion (System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WaitForCompletion(valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ClientModel.Primitives.OperationResult.WaitForCompletion(System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Sub WaitForCompletion (Optional cancellationToken As CancellationToken = Nothing)" />
      <MemberSignature Language="F#" Value="abstract member WaitForCompletion : System.Threading.CancellationToken -&gt; unit" Usage="operationResult.WaitForCompletion cancellationToken" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ClientModel</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="cancellationToken">To be added.</param>
        <summary>
            Waits for the operation to complete processing on the service.
            </summary>
        <remarks>Derived types may implement <see cref="M:System.ClientModel.Primitives.OperationResult.WaitForCompletion(System.Threading.CancellationToken)" />
            using different mechanisms to obtain updates from the service regarding
            the progress of the operation.  If the derived type polls for status
            updates, it provides overloads of <see cref="M:System.ClientModel.Primitives.OperationResult.WaitForCompletion(System.Threading.CancellationToken)" />
            that allow the caller to specify the polling interval or delay strategy
            used to wait between sending request for updates.
            </remarks>
        <exception cref="T:System.OperationCanceledException">The <paramref name="cancellationToken" />
            was cancelled.</exception>
      </Docs>
    </Member>
    <Member MemberName="WaitForCompletionAsync">
      <MemberSignature Language="C#" Value="public abstract System.Threading.Tasks.Task WaitForCompletionAsync (System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task WaitForCompletionAsync(valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ClientModel.Primitives.OperationResult.WaitForCompletionAsync(System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function WaitForCompletionAsync (Optional cancellationToken As CancellationToken = Nothing) As Task" />
      <MemberSignature Language="F#" Value="abstract member WaitForCompletionAsync : System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="operationResult.WaitForCompletionAsync cancellationToken" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ClientModel</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="cancellationToken">To be added.</param>
        <summary>
            Waits for the operation to complete processing on the service.
            </summary>
        <returns>To be added.</returns>
        <remarks>Derived types may implement <see cref="M:System.ClientModel.Primitives.OperationResult.WaitForCompletionAsync(System.Threading.CancellationToken)" />
            using different mechanisms to obtain updates from the service regarding
            the progress of the operation.  If the derived type polls for status
            updates, it provides overloads of <see cref="M:System.ClientModel.Primitives.OperationResult.WaitForCompletionAsync(System.Threading.CancellationToken)" />
            that allow the caller to specify the polling interval or delay strategy
            used to wait between sending request for updates.
            </remarks>
        <exception cref="T:System.OperationCanceledException">The <paramref name="cancellationToken" />
            was cancelled.</exception>
      </Docs>
    </Member>
  </Members>
</Type>
